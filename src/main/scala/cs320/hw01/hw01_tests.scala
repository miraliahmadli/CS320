// def tests: Unit = {
//   // 1. Primitives (20 pts)
//   test(volumeOfCuboid(1, 2, 3), 6)
//   test(volumeOfCuboid(4, 5, 7), 140)
//   test(volumeOfCuboid(6, 3, 10), 180)
//   test(volumeOfCuboid(2, 4, 3), 24)
//   test(volumeOfCuboid(10, 20, 30), 6000)
//   test(volumeOfCuboid(100, 200, 300), 6000000)
//   test(volumeOfCuboid(1, 1, 1), 1)
//   test(volumeOfCuboid(4, 10, 12), 480)
//   test(volumeOfCuboid(2, 4, 6), 48)
//   test(volumeOfCuboid(42, 42, 42), 74088)
//   test(concat("", ""), "")
//   test(concat("abc", "def"), "abcdef")
//   test(concat("cs", "320"), "cs320")
//   test(concat("2", "4"), "24")
//   test(concat("cs320", "course"), "cs320course")
//   test(concat("a", concat("b", "c")), "abc")
//   test(concat("a", concat("b", concat("c", "d"))), "abcd")
//   test(concat(concat("a", "b"), concat("c", "d")), "abcd")
//   test(concat(concat("a", concat("b", "c")), "d"), "abcd")
//   test(concat(concat(concat("a", "b"), "c"), "d"), "abcd")

//   // 2. Function Values (30 pts)
//   test(addN(5)(3), 8)
//   test(addN(-57)(8), -49)
//   test(addN(-63)(68), 5)
//   test(addN(-62)(-67), -129)
//   test(addN(-931506)(990891), 59385)
//   test(addN(-660358)(-706252), -1366610)
//   test(addN(-421114)(-170574), -591688)
//   test(addN(1)(addN(2)(3)), 6)
//   test(addN(addN(1)(2))(3), 6)
//   test(addN(1)(addN(2)(addN(3)(4))), 10)
//   test(twice(addN(3))(2), 8)
//   test(twice(addN(3))(7), 13)
//   test(twice(_ * 2)(3), 12)
//   test(twice(_ * 2 - 1)(5), 17)
//   test(twice(10 - _)(42), 42)
//   test(twice(x => x)(42), 42)
//   test(twice(x => x * x)(3), 81)
//   test(twice(x => x * x + x)(2), 42)
//   test(twice(twice(twice(_ + 1)))(1), 9)
//   test(twice(twice(twice(_ * 2)))(1), 256)
//   test(compose(addN(3), addN(4))(5), 12)
//   test(compose(addN(3), addN(4))(11), 18)
//   test(compose(_ + 1, _ * 2)(5), 11)
//   test(compose(10 - _, _ + 2)(4), 4)
//   test(compose(x => x * x, _ + 3)(1), 16)
//   test(compose(compose(_ + 3, _ + 2), _ + 1)(0), 6)
//   test(compose(compose(_ * 3, _ * 2), _ * 1)(1), 6)
//   test(compose(compose(_ + 4, _ + 3), compose(_ + 2, _ + 1))(0), 10)
//   test(compose(compose(_ * 4, _ * 3), compose(_ * 2, _ * 1))(1), 24)
//   test(compose(x => x * x * x, x => x * x)(2), 64)

//   // 3. Data Structures (50 pts)
//   // 3.1. Lists (20 pts)
//   test(double(List(1, 2, 3)), List(2, 4, 6))
//   test(double(double(List(1, 2, 3))), List(4, 8, 12))
//   test(double(Nil), Nil)
//   test(double(List(1)), List(2))
//   test(double(List(-92)), List(-184))
//   test(double(List(-27)), List(-54))
//   test(double(List(42, 3, 2, 1)), List(84, 6, 4, 2))
//   test(double(List(-10, 50, 71, 29)), List(-20, 100, 142, 58))
//   test(double(List(28, 89, -29, 81, -44, 38, -83)), List(56, 178, -58, 162, -88, 76, -166))
//   test(double(List(3, -14, -62, -80, 14, 56, -39, -83, 36, 71)), List(6, -28, -124, -160, 28, 112, -78, -166, 72, 142))
//   test(sum(List(1, 2, 3)), 6)
//   test(sum(List(4, 2, 3, 7, 5)), 21)
//   test(sum(Nil), 0)
//   test(sum(List(86)), 86)
//   test(sum(List(-45, 20)), -25)
//   test(sum(List(-65, -34, -87, 60)), -126)
//   test(sum(List(-12, -76, -26, -52, 0, -22)), -188)
//   test(sum(List(-56, 52, -61, -86, -38, 15, -45)), -219)
//   test(sum(List(25, -96, -46, -94, 0, -31, -81, 8, 11, -4)), -308)
//   test(sum(List(33, 50, -37, -45, 18, 15, -66, 88, -68, 41)), 29)

//   // 3.2. Maps (10 pts)
//   test(getKey(Map("Ryu" -> 42, "PL" -> 37), "Ryu"), 42)
//   test(getKey(Map("Ryu" -> 42, "PL" -> 37), "PL"), 37)
//   testExc(getKey(Map("Ryu" -> 42, "PL" -> 37), "CS320"), "CS320")
//   test(getKey(Map("a" -> 1), "a"), 1)
//   test(getKey(Map("b" -> 2), "b"), 2)
//   test(getKey(Map("a" -> 1, "b" -> 2), "a"), 1)
//   test(getKey(Map("a" -> 1, "b" -> 2), "b"), 2)
//   test(getKey(Map("a" -> 1, "b" -> 2, "c" -> 3), "c"), 3)
//   testExc(getKey(Map("a" -> 1, "b" -> 2, "c" -> 3), "d"), "d")
//   testExc(getKey(Map(), "empty"), "empty")

//   // 3.3. User-defined Structures (20 pts)
//   test(countLeaves(Branch(Leaf(1), 2, Branch(Leaf(3), 4, Leaf(5)))), 3)
//   test(countLeaves(Leaf(-4)), 1)
//   test(countLeaves(Leaf(8)), 1)
//   test(countLeaves(Branch(Leaf(-9),-2,Branch(Branch(Branch(Branch(Leaf(9),0,Leaf(1)),0,Leaf(9)),-7,Leaf(1)),-7,Leaf(9)))), 6)
//   test(countLeaves(Branch(Leaf(-4),4,Leaf(-5))), 2)
//   test(countLeaves(Leaf(3)), 1)
//   test(countLeaves(Branch(Leaf(9),-5,Branch(Branch(Branch(Leaf(-6),9,Branch(Leaf(7),2,Leaf(-7))),-7,Branch(Branch(Leaf(-4),5,Leaf(0)),-7,Branch(Leaf(3),0,Leaf(3)))),1,Branch(Branch(Branch(Leaf(0),4,Leaf(6)),4,Branch(Leaf(3),4,Leaf(7))),-2,Leaf(-4))))), 13)
//   test(countLeaves(Branch(Leaf(1),0,Branch(Leaf(-2),7,Branch(Leaf(0),2,Leaf(8))))), 4)
//   test(countLeaves(Branch(Branch(Branch(Leaf(-6),-9,Leaf(9)),0,Leaf(-6)),-9,Branch(Leaf(8),0,Leaf(1)))), 5)
//   test(countLeaves(Branch(Branch(Branch(Branch(Branch(Leaf(7),-2,Leaf(-1)),0,Leaf(-6)),-6,Leaf(9)),9,Leaf(1)),9,Branch(Branch(Leaf(6),-4,Branch(Branch(Leaf(-5),0,Leaf(6)),-3,Leaf(2))),2,Branch(Leaf(-6),-1,Branch(Leaf(-5),0,Branch(Leaf(-9),7,Leaf(-4))))))), 13)
//   test(flatten(Branch(Leaf(1), 2, Branch(Leaf(3), 4, Leaf(5)))), List(1, 2, 3, 4, 5))
//   test(flatten(Leaf(-4)), List(-4))
//   test(flatten(Leaf(8)), List(8))
//   test(flatten(Branch(Leaf(-9),-2,Branch(Branch(Branch(Branch(Leaf(9),0,Leaf(1)),0,Leaf(9)),-7,Leaf(1)),-7,Leaf(9)))), List(-9, -2, 9, 0, 1, 0, 9, -7, 1, -7, 9))
//   test(flatten(Branch(Leaf(-4),4,Leaf(-5))), List(-4, 4, -5))
//   test(flatten(Leaf(3)), List(3))
//   test(flatten(Branch(Leaf(9),-5,Branch(Branch(Branch(Leaf(-6),9,Branch(Leaf(7),2,Leaf(-7))),-7,Branch(Branch(Leaf(-4),5,Leaf(0)),-7,Branch(Leaf(3),0,Leaf(3)))),1,Branch(Branch(Branch(Leaf(0),4,Leaf(6)),4,Branch(Leaf(3),4,Leaf(7))),-2,Leaf(-4))))), List(9, -5, -6, 9, 7, 2, -7, -7, -4, 5, 0, -7, 3, 0, 3, 1, 0, 4, 6, 4, 3, 4, 7, -2, -4))
//   test(flatten(Branch(Leaf(1),0,Branch(Leaf(-2),7,Branch(Leaf(0),2,Leaf(8))))), List(1, 0, -2, 7, 0, 2, 8))
//   test(flatten(Branch(Branch(Branch(Leaf(-6),-9,Leaf(9)),0,Leaf(-6)),-9,Branch(Leaf(8),0,Leaf(1)))), List(-6, -9, 9, 0, -6, -9, 8, 0, 1))
//   test(flatten(Branch(Branch(Branch(Branch(Branch(Leaf(7),-2,Leaf(-1)),0,Leaf(-6)),-6,Leaf(9)),9,Leaf(1)),9,Branch(Branch(Leaf(6),-4,Branch(Branch(Leaf(-5),0,Leaf(6)),-3,Leaf(2))),2,Branch(Leaf(-6),-1,Branch(Leaf(-5),0,Branch(Leaf(-9),7,Leaf(-4))))))), List(7, -2, -1, 0, -6, -6, 9, 9, 1, 9, 6, -4, -5, 0, 6, -3, 2, 2, -6, -1, -5, 0, -9, 7, -4))
// }
